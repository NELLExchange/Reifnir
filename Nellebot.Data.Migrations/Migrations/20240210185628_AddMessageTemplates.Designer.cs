// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Nellebot.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Nellebot.Data.Migrations.Migrations
{
    [DbContext(typeof(BotDbContext))]
    [Migration("20240210185628_AddMessageTemplates")]
    partial class AddMessageTemplates
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Nellebot.Common.Models.AwardMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("AwardChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<long>("AwardCount")
                        .HasColumnType("bigint");

                    b.Property<decimal>("AwardedMessageId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("OriginalChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("OriginalMessageId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("AwardedMessageId")
                        .IsUnique();

                    b.HasIndex("OriginalMessageId")
                        .IsUnique();

                    b.ToTable("AwardMessages");
                });

            modelBuilder.Entity("Nellebot.Common.Models.BotSettting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("GuildSettings");
                });

            modelBuilder.Entity("Nellebot.Common.Models.MessageRef", b =>
                {
                    b.Property<decimal>("MessageId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("MessageId");

                    b.ToTable("MessageRefs");
                });

            modelBuilder.Entity("Nellebot.Common.Models.MessageTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<decimal>("AuthorId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MessageTemplates");
                });

            modelBuilder.Entity("Nellebot.Common.Models.Modmail.ModmailTicket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RequesterDisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RequesterId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ModmailTickets");
                });

            modelBuilder.Entity("Nellebot.Common.Models.Ordbok.Store.OrdbokArticleStore", b =>
                {
                    b.Property<string>("Dictionary")
                        .HasColumnType("text");

                    b.Property<string>("WordClass")
                        .HasColumnType("text");

                    b.Property<int>("ArticleCount")
                        .HasColumnType("integer");

                    b.Property<int[]>("ArticleList")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Dictionary", "WordClass");

                    b.ToTable("OrdbokArticlesStore");
                });

            modelBuilder.Entity("Nellebot.Common.Models.Ordbok.Store.OrdbokConceptStore", b =>
                {
                    b.Property<string>("Dictionary")
                        .HasColumnType("text");

                    b.Property<Dictionary<string, string>>("Concepts")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Dictionary");

                    b.ToTable("OrdbokConceptStore");
                });

            modelBuilder.Entity("Nellebot.Common.Models.UserLogs.UserLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("LogType")
                        .HasColumnType("integer");

                    b.Property<string>("RawValue")
                        .HasColumnType("text")
                        .HasColumnName("Value");

                    b.Property<decimal?>("ResponsibleUserId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("ValueType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "LogType", "Timestamp")
                        .IsDescending(false, false, true);

                    b.ToTable("UserLogs");
                });

            modelBuilder.Entity("Nellebot.Common.Models.UserRoles.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long?>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("RoleId")
                        .IsUnique();

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Nellebot.Common.Models.UserRoles.UserRoleAlias", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid>("UserRoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Alias")
                        .IsUnique();

                    b.HasIndex("UserRoleId");

                    b.ToTable("UserRoleAliases");
                });

            modelBuilder.Entity("Nellebot.Common.Models.UserRoles.UserRoleGroup", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<bool>("MutuallyExclusive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.ToTable("UserRoleGroups");
                });

            modelBuilder.Entity("Nellebot.Common.Models.Modmail.ModmailTicket", b =>
                {
                    b.OwnsOne("Nellebot.Common.Models.Modmail.ModmailTicketPost", "TicketPost", b1 =>
                        {
                            b1.Property<Guid>("ModmailTicketId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("ChannelThreadId")
                                .HasColumnType("numeric(20,0)")
                                .HasColumnName("ChannelThreadId");

                            b1.Property<decimal>("MessageId")
                                .HasColumnType("numeric(20,0)")
                                .HasColumnName("MessageId");

                            b1.HasKey("ModmailTicketId");

                            b1.ToTable("ModmailTickets");

                            b1.WithOwner()
                                .HasForeignKey("ModmailTicketId");
                        });

                    b.Navigation("TicketPost");
                });

            modelBuilder.Entity("Nellebot.Common.Models.UserRoles.UserRole", b =>
                {
                    b.HasOne("Nellebot.Common.Models.UserRoles.UserRoleGroup", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Nellebot.Common.Models.UserRoles.UserRoleAlias", b =>
                {
                    b.HasOne("Nellebot.Common.Models.UserRoles.UserRole", "UserRole")
                        .WithMany("UserRoleAliases")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Nellebot.Common.Models.UserRoles.UserRole", b =>
                {
                    b.Navigation("UserRoleAliases");
                });
#pragma warning restore 612, 618
        }
    }
}
